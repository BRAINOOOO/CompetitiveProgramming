#include <bits/stdc++.h>
#include<iostream>
#include<iomanip>
#include<cstring>
#include<map>
#define sz(v)   ((int)(v).size())
#define  all(v)    ((v).begin()),((v).end())
#define  allr(v)    ((v).rbegin()),((v).rend())
#define   pb         push_back
#define   mp         make_pair
#define   mt         make_tuple
#define    clr(v,d)      memset( v, d ,sizeof(v))
#define   angle(n)      atan2((n.imag()),(n.real()))
#define   vec(a,b)       ((b)-(a))
#define   length(a)      hypot( (a.imag()),(a.real()) )
#define   normalize(a)      (a)/(length(a))
#define    dp(a,b)          (((conj(a))*(b)).real())
#define    cp(a,b)          (((conj(a))*(b)).imag())
#define    lengthsqrt(a)       dp(a,a)
#define    rotate0( a,ang)    ((a)*exp( point(0,ang) ))
#define    rotateA(about,p,ang)   (rotate0(vec(about,p),ang)+about)
#define    lcm(a,b)                ((a*b)/(__gcd(a,b)))
#define    reflection0(m,v)         (conj((v)/(m))*(m))
#define     reflectionA(m,v,p0)     (conj( (vec(p0,v))/(vec(p0,m)) ) * (vec(p0,m)) ) + p0
#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < eps )
#define     point                    complex<double>
typedef  long long     ll ;
typedef  unsigned long long ull;
const double eps= (1e-5);
using namespace std;
int dcmp(long double a,long double b){   return fabsl(a-b)<=eps ? 0: (a>b)? 1:-1  ;}
int getBit(int num, int idx) {return ((num >> idx) & 1) == 1;}
int setBit1(int num, int idx) {return num | (1<<idx);}
ll setBit0(ll num, int idx) {return num & ~(1ll<<idx);}
ll flipBit(ll num, int idx) {return num ^ (1ll<<idx);}
void M(){ ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);}
int countNumBit1(int mask) {int ret=0; while (mask) 	{mask &= (mask-1);++ret;	}return ret;}
#define fst first
#define snd second

struct tree 
{
  int n;
  vector<vector<int>> adj;
  
  tree(int n) : n(n), adj(n) { }
  void add_edge(int src, int dst)
  {
    adj[src].push_back(dst);
    adj[dst].push_back(src);
  }
  vector<int> centers() 
  {
    vector<int> prev;
    int u = 0;
    
    for (int k = 0; k < 2; ++k) 
    { // double sweep
      queue<int> que;
      prev.assign(n, -1);
      que.push(prev[u] = u);
      while (!que.empty()) 
      {
        u = que.front(); que.pop();
        for (auto v: adj[u]) 
        {
          if (prev[v] >= 0) continue;
          que.push(v);
          prev[v] = u;
        }
      }
    }
    vector<int> path = {u}; // median on a path
    while (u != prev[u])
      path.push_back(u = prev[u]);
    
    int m = path.size();
    if (m % 2 == 0)
     return {path[m/2-1], path[m/2]};
    else      
        return {path[m/2]};
  }

  vector<vector<int>> layer;
  vector<int> prev;
  int levelize(int r) 
  { // split vertices into levels
    prev.assign(n,-1); prev[r] = n;
    layer = {{r}};
    while (1) 
    {
      vector<int> next;
      for (int u: layer.back()) 
      {
        for (int v: adj[u]) {
          if (prev[v] >= 0) continue;
          prev[v] = u;
          next.push_back(v);
        }
      }
      if (next.empty()) break;
      layer.push_back(next);
    }
    return layer.size();
  }
};

bool isomorphic(tree S, int s, tree T, int t) 
{
  if (S.n != T.n) return false;
  if (S.levelize(s) != T.levelize(t)) return false;

  vector<vector<int>> longcodeS(S.n+1), longcodeT(T.n+1);
  vector<int> codeS(S.n), codeT(T.n);
  for (int h = S.layer.size()-1; h >= 0; --h)
{
    map<vector<int>, int> bucket;
    for (int u: S.layer[h]) {
      sort(all(longcodeS[u]));
      bucket[longcodeS[u]] = 0;
    }
    for (int u: T.layer[h]) 
    {
      sort(all(longcodeT[u]));
      bucket[longcodeT[u]] = 0;
    }
    int id = 0;
    for (auto &p: bucket) p.snd = id++;
    for (int u: S.layer[h])
    {
      codeS[u] = bucket[longcodeS[u]];
      longcodeS[S.prev[u]].push_back(codeS[u]);
    }
    
    for (int u: T.layer[h])
    {
      codeT[u] = bucket[longcodeT[u]];
      longcodeT[T.prev[u]].push_back(codeT[u]);
    }
  }
  return codeS[s] == codeT[t];
}
bool isomorphic(tree S, tree T) 
{
  auto x = S.centers(), y = T.centers();
  if (x.size() != y.size()) 
    return false;
  if (isomorphic(S, x[0], T, y[0])) 
  return true;
  return x.size() > 1 && isomorphic(S, x[1], T, y[0]);
}

void doit() 
{
  int n; scanf("%d", &n);
  tree S(n), T(n);
  for (int i = 0; i < n-1; ++i) 
  {
    int u, v; scanf("%d %d", &u, &v);
    S.add_edge(u-1, v-1);
  }
  for (int i = 0; i < n-1; ++i) 
  {
    int u, v; scanf("%d %d", &u, &v);
    T.add_edge(u-1, v-1);
  }
  if (isomorphic(S, T))
   printf("YES\n");
  else                 
   printf("NO\n");
}
int main() 
{
  int ncase; 
  scanf("%d", &ncase);
  for (int icase = 0; icase < ncase; ++icase) 
    doit();
}


