#include <bits/stdc++.h>
#include<iostream>
#include<iomanip>
#include<cstring>
#include<map>
#define sz(v)   ((int)(v).size())
#define  all(v)    ((v).begin()),((v).end())
#define  allr(v)    ((v).rbegin()),((v).rend())
#define   pb         push_back
#define   mp         make_pair
#define   mt         make_tuple
#define    clr(v,d)      memset( v, d ,sizeof(v))
#define   angle(n)      atan2((n.imag()),(n.real()))
#define   vec(a,b)       ((b)-(a))
#define   length(a)      hypot( (a.imag()),(a.real()) )
#define   normalize(a)      (a)/(length(a))
#define    dp(a,b)          (((conj(a))*(b)).real())
#define    cp(a,b)          (((conj(a))*(b)).imag())
#define    lengthsqrt(a)       dp(a,a)
#define    rotate0( a,ang)    ((a)*exp( point(0,ang) ))
#define    rotateA(about,p,ang)   (rotate0(vec(about,p),ang)+about)
#define    lcm(a,b)                ((a*b)/(__gcd(a,b)))
#define    reflection0(m,v)         (conj((v)/(m))*(m))
#define     reflectionA(m,v,p0)     (conj( (vec(p0,v))/(vec(p0,m)) ) * (vec(p0,m)) ) + p0
#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < eps )
#define     point                    complex<double>
typedef  long long     ll ;
typedef  unsigned long long ull;
const double eps= (1e-5);
using namespace std;
int dcmp(long double a,long double b){   return fabsl(a-b)<=eps ? 0: (a>b)? 1:-1  ;}
ll getBit(ll num, int idx) {return ((num >> idx) & 1ll) == 1;}
int setBit1(int num, int idx) {return num | (1<<idx);}
ll setBit0(ll num, int idx) {return num & ~(1ll<<idx);}
ll flipBit(ll num, int idx) {return num ^ (1ll<<idx);}
void M(){ ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);}
int countNumBit1(int mask) {int ret=0; while (mask) 	{mask &= (mask-1);++ret;	}return ret;}
const int H=10009;
int vis[H],level[H],dist[H],par[H],p[H][30];
vector< vector< pair<int,int> > > v;
void I()
{
    v.clear();
    v.resize(H);
    clr(vis,0);
    clr(dist,0);
    clr(par,-1);
    clr(p,-1);
}
void dfs(int cur,int lv)
{

   vis[cur]=1;
   level[cur]=lv;
   for(int i=0;i<sz(v[cur]);i++)
   {
       int nw=v[cur][i].first;
       if(vis[nw])
        continue;
       par[nw]=cur;
       dist[nw]=dist[cur]+v[cur][i].second;
       dfs(nw,lv+1);
   }
}













int LCA(int n)
{

    for(int i=0;i<n;i++)
        p[i][0]=par[i];

    for(int j=1;(1<<j)<n;j++)
    {
        for(int i=0;i<n;i++)
        {
            if(p[i][j-1]!=-1)
            {
                p[i][j]=p[p[i][j-1]][j-1];
            }
        }
    }

}

int query(int a,int b)
{

    if(level[a]>level[b])
    swap(a,b);

    int mx=(int)log2(level[b]);

    for(int i=mx;i>=0;i--)
    {
        if(level[b]-(1<<i)>=level[a])
        {
            b=p[b][i];
        }
    }

    if(a==b)
        return b;

    for(int i=mx;i>=0;i--)
    {
        if(p[b][i]!=-1&&p[b][i]!=p[a][i])
        {
            b=p[b][i];
            a=p[a][i];
        }
    }
    return par[a];


}
int kth(int st,int k)
{


    int mx= (int)log2(level[st]);

    for(int i=mx;i>=0;i--)
    {
        if(level[st]-(1<<i)>=k)
        {
            st=p[st][i];
        }
    }

    return st;
}





int main()
{

    int t;
    cin>>t;
    int n;
    while(t--)
    {
        cin>>n;
        I();
        int f,t,c;
        for(int i=0;i<n-1;i++)
        {
            cin>>f>>t>>c;
            f--;
            t--;
            v[f].pb(mp(t,c));
            v[t].pb(mp(f,c));
        }
        dfs(0,0);

        LCA(n);
        string st;
        int a,b,k;
        while(1)
        {
            cin>>st;
            if(st=="DONE")
                break;
            cin>>a>>b;
            a--;
            b--;
            int lca=query(a,b);
            if(st=="DIST")
            {

                cout<< dist[a]+dist[b]-2*dist[lca]<<endl;
            }
            else
            {
                cin>>k;
               int x=level[a]-level[lca];
               int y=level[b]-level[lca];

                if(k<=x)
                    cout<<kth(a,level[a]-k+1)+1<<endl;
                else
                    cout<<kth(b,2*level[lca]+k-level[a]-1)+1<<endl;
            }
        }

        cout<<endl;
    }
}

