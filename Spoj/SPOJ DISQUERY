#include <bits/stdc++.h>
#include<iostream>
#include<iomanip>
#include<cstring>
#include<map>
#define sz(v)   ((int)(v).size())
#define  all(v)    ((v).begin()),((v).end())
#define  allr(v)    ((v).rbegin()),((v).rend())
#define   pb         push_back
#define   mp         make_pair
#define   mt         make_tuple
#define    clr(v,d)      memset( v, d ,sizeof(v))
#define   angle(n)      atan2((n.imag()),(n.real()))
#define   vec(a,b)       ((b)-(a))
#define   length(a)      hypot( (a.imag()),(a.real()) )
#define   normalize(a)      (a)/(length(a))
#define    dp(a,b)          (((conj(a))*(b)).real())
#define    cp(a,b)          (((conj(a))*(b)).imag())
#define    lengthsqrt(a)       dp(a,a)
#define    rotate0( a,ang)    ((a)*exp( point(0,ang) ))
#define    rotateA(about,p,ang)   (rotate0(vec(about,p),ang)+about)
#define    lcm(a,b)                ((a*b)/(__gcd(a,b)))
#define    reflection0(m,v)         (conj((v)/(m))*(m))
#define     reflectionA(m,v,p0)     (conj( (vec(p0,v))/(vec(p0,m)) ) * (vec(p0,m)) ) + p0
#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < eps )
#define     point                    complex<double>
typedef  long long     ll ;
typedef  unsigned long long ull;
const double eps= (1e-5);
using namespace std;
int dcmp(long double a,long double b){   return fabsl(a-b)<=eps ? 0: (a>b)? 1:-1  ;}
ll getBit(ll num, int idx) {return ((num >> idx) & 1ll) == 1;}
int setBit1(int num, int idx) {return num | (1<<idx);}
ll setBit0(ll num, int idx) {return num & ~(1ll<<idx);}
ll flipBit(ll num, int idx) {return num ^ (1ll<<idx);}
void M(){ ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);}
int countNumBit1(int mask) {int ret=0; while (mask) 	{mask &= (mask-1);++ret;	}return ret;}
const int H=100009;
int n,vis[H],level[H];
pair<int,int> par[H];
vector< vector< pair<int,int> > > v(H);
typedef struct Node
{
    int p,mx,mi;
}N;
N p[H][20];
void dfs(int no,int dep)
{
    level[no]=dep;
    vis[no]=1;
    for(int i=0;i<sz(v[no]);i++)
    {
        int nw=v[no][i].first;
        int w=v[no][i].second;
        if(vis[nw])
            continue;
        par[nw]=mp(no,w);
        dfs(nw,dep+1);
    }
}
void pprocess()
{
    dfs(1,1);
    for(int i=1;i<=n;i++)
    {
        p[i][0].p=par[i].first;
        p[i][0].mi=par[i].second;
        p[i][0].mx=par[i].second;
    }

    for(int j=1;(1<<j)<n;j++)
    {
        for(int i=1;i<=n;i++)
        {
            if(p[i][j-1].p!=-1)
            {
                p[i][j].p=p[p[i][j-1].p][j-1].p;
                p[i][j].mi=min(p[i][j-1].mi,p[p[i][j-1].p][j-1].mi);
                p[i][j].mx=max(p[i][j-1].mx,p[p[i][j-1].p][j-1].mx);
            }
        }
    }
}
int LCA(int a,int b)
{

    if(level[a]>level[b])
        swap(a,b);
    int mx=(int)log2(level[b]);

    for(int i=mx;i>=0;i--)
    {
        if(level[b]-(1<<i)>=level[a])
            b=p[b][i].p;
    }
    if(b==a)
        return a;

    for(int i=mx;i>=0;i--)
    {
        if(p[b][i].p!=-1&&p[b][i].p!=p[a][i].p)
        {
            b=p[b][i].p;
            a=p[a][i].p;
        }
    }

    return par[a].first;
}
int getmin(int a,int k)
{

    int mx=(int)log2(level[a]);
    int mi=INT_MAX;
    for(int i=mx;i>=0;i--)
    {
        if(level[a]-(1<<i)>=k)
        {
            mi=min(mi,p[a][i].mi);
            a=p[a][i].p;
        }
    }
    return mi;
}

int getmax(int a,int k)
{

    int mx=(int)log2(level[a]);
    int mxx=0;
    for(int i=mx;i>=0;i--)
    {
        if(level[a]-(1<<i)>=k)
        {
            mxx=max(mxx,p[a][i].mx);
            a=p[a][i].p;
        }
    }
    return mxx;
}

int main()
{
    cin>>n;
    int f,t,w;
    for(int i=0;i<n-1;i++)
    {
        cin>>f>>t>>w;
        v[f].pb(mp(t,w));
        v[t].pb(mp(f,w));
    }

    clr(par,-1);
    pprocess();
    int q;
    cin>>q;

    while(q--)
    {
        cin>>f>>t;

        int lca=LCA(f,t);

        cout<<min(getmin(t,level[lca]),getmin(f,level[lca]))<<" "<<max(getmax(t,level[lca]),getmax(f,level[lca]))
<<endl;

    }

}



