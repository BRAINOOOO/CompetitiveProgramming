#include <bits/stdc++.h>
#include<iostream>
#include<iomanip>
#include<cstring>
#include<map>
#define sz(v)   ((int)(v).size())
#define  all(v)    ((v).begin()),((v).end())
#define  allr(v)    ((v).rbegin()),((v).rend())
#define   pb         push_back
#define   mp         make_pair
#define   mt         make_tuple
#define    clr(v,d)      memset( v, d ,sizeof(v))
#define   angle(n)      atan2((n.imag()),(n.real()))
#define   vec(a,b)       ((b)-(a))
#define   length(a)      hypot( (a.imag()),(a.real()) )
#define   normalize(a)      (a)/(length(a))
#define    dp(a,b)          (((conj(a))*(b)).real())
#define    cp(a,b)          (((conj(a))*(b)).imag())
#define    lengthsqrt(a)       dp(a,a)
#define    rotate0( a,ang)    ((a)*exp( point(0,ang) ))
#define    rotateA(about,p,ang)   (rotate0(vec(about,p),ang)+about)
#define    lcm(a,b)                ((a*b)/(__gcd(a,b)))
#define    reflection0(m,v)         (conj((v)/(m))*(m))
#define     reflectionA(m,v,p0)     (conj( (vec(p0,v))/(vec(p0,m)) ) * (vec(p0,m)) ) + p0
#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < eps )
#define     point                    complex<double>
typedef  long long     ll ;
typedef  unsigned long long ull;
const double eps= (1e-5);
using namespace std;
int dcmp(long double a,long double b){   return fabsl(a-b)<=eps ? 0: (a>b)? 1:-1  ;}
ll getBit(ll num, int idx) {return ((num >> idx) & 1ll) == 1;}
int setBit1(int num, int idx) {return num | (1<<idx);}
ll setBit0(ll num, int idx) {return num & ~(1ll<<idx);}
ll flipBit(ll num, int idx) {return num ^ (1ll<<idx);}
void M(){ ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);}
int countNumBit1(int mask) {int ret=0; while (mask) 	{mask &= (mask-1);++ret;	}return ret;}
int n,m,vis[1009][1009],dist[1009][1009];
vector< string> v;
int dr[]={0,1,0,-1};
int dc[]={1,0,-1,0};
typedef struct node
{
    int r,c,w;
    node(int n1,int n2,int n3)
    {
        r=n1; c=n2; w=n3;
    }


}N;

bool valid(int r,int c)
{
    return (r>=0&&r<n&&c>=0&&c<m);
}
int Dijk()
{
    for(int i=0;i<n;i++)
        for(int j=0;j<m;j++)
         dist[i][j]=INT_MAX;

    clr(vis,0);
    deque< N > q;

    q.push_back(N(0,0,0));
    dist[0][0]=0;

    while(!q.empty())
    {
        int curr=q.front().r;
        int curcl=q.front().c;

        q.pop_front();

        if(vis[curr][curcl])
            continue;

        vis[curr][curcl]=1;

        int add=dist[curr][curcl];

        for(int i=0;i<4;i++)
        {
            int nwr=curr+dr[i];
            int nwc=curcl+dc[i];

            if(!valid(nwr,nwc))
                continue;
            int w=add+(v[nwr][nwc]!=v[curr][curcl]);

            if(dist[nwr][nwc]>w)
            {
                dist[nwr][nwc]=w;
                if((v[nwr][nwc]!=v[curr][curcl]))
                q.push_back(N(nwr,nwc,w));
                else
                q.push_front(N(nwr,nwc,w));
            }
        }
    }

    return dist[n-1][m-1];
}









int main()
{
    M();
    int T;
    cin>>T;
   
    while(T--)
    {
        cin>>n>>m;
        v.clear();
        string st;
        for(int i=0;i<n;i++)
        {
            cin>>st;
            v.pb(st);
        }

       cout<< Dijk() <<endl;
    }


}




















