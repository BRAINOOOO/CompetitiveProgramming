#include <bits/stdc++.h>
#include<iostream>
#include<iomanip>
#include<cstring>
#include<map>
#define sz(v)   ((int)(v).size())
#define  all(v)    ((v).begin()),((v).end())
#define  allr(v)    ((v).rbegin()),((v).rend())
#define   pb         push_back
#define   mp         make_pair
#define   mt         make_tuple
#define    clr(v,d)      memset( v, d ,sizeof(v))
#define   angle(n)      atan2((n.imag()),(n.real()))
#define   vec(a,b)       ((b)-(a))
#define   length(a)      hypot( (a.imag()),(a.real()) )
#define   normalize(a)      (a)/(length(a))
#define    dp(a,b)          (((conj(a))*(b)).real())
#define    cp(a,b)          (((conj(a))*(b)).imag())
#define    lengthsqrt(a)       dp(a,a)
#define    rotate0( a,ang)    ((a)*exp( point(0,ang) ))
#define    rotateA(about,p,ang)   (rotate0(vec(about,p),ang)+about)
#define    lcm(a,b)                ((a*b)/(__gcd(a,b)))
#define    reflection0(m,v)         (conj((v)/(m))*(m))
#define     reflectionA(m,v,p0)     (conj( (vec(p0,v))/(vec(p0,m)) ) * (vec(p0,m)) ) + p0
#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < eps )
#define     point                    complex<double>
typedef  long long     ll ;
typedef  unsigned long long ull;
const double eps= (1e-9);
using namespace std;
int dcmp(long double a,long double b){   return fabsl(a-b)<=eps ? 0: (a>b)? 1:-1  ;}
int getBit(int num, int idx) {return ((num >> idx) & 1) == 1;}
int setBit1(int num, int idx) {return num | (1<<idx);}
ll setBit0(ll num, int idx) {return num & ~(1ll<<idx);}
ll flipBit(ll num, int idx) {return num ^ (1ll<<idx);}
void M(){ ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);}
int countNumBit1(int mask) {int ret=0; while (mask) 	{mask &= (mask-1);++ret;	}return ret;}
int mem[(1<<17)+5],m,n,vis[(1<<17)+5],Y;
int v[50009];
int solve(int msk)
{
   // cout<<msk<<endl;
    int &ret=mem[msk];
    if(ret!=-1)
        return ret;
    int ans=0;
    for(int i=0;i<Y;i++)
    {
        int temp=v[i];
        temp&=msk;

        if(temp!=0)
        {
            continue;
        }
       int val= v[i]|msk;
       ans=max(ans,1+ solve(val));

    }

    return ret=ans;
}
int main()
{

    while(scanf("%d %d", &n, &m) != EOF)
    {

      int no,k;
      int id=0;
    for(int i=0;i<m;i++)
    {
        scanf("%d", &k);
        int msk2=0;
        for(int j=0;j<k;j++)
        {
            scanf("%d", &no);
            no--;
            msk2=setBit1(msk2,no);
        }
        bool ok=1;
        for(int i=0;i<id&&ok;i++)
        {
            if((msk2&v[i])==v[i])
            {
                ok=0;
            }
            else if((msk2&v[i])==msk2)
            {
                v[i]=msk2;
                ok=0;
            }
        }
        if(!ok)
            continue;
        v[id++]=msk2;
    }

    Y=id;
     clr(mem,-1);
     printf("%d\n",solve(0));
    }
}





