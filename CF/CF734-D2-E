#include <bits/stdc++.h>
#include<iostream>
#include<iomanip>
#include<cstring>
#include<map>
#define sz(v)   ((int)(v).size())
#define  all(v)    ((v).begin()),((v).end())
#define  allr(v)    ((v).rbegin()),((v).rend())
#define   pb         push_back
#define   mp         make_pair
#define   mt         make_tuple
#define    clr(v,d)      memset( v, d ,sizeof(v))
#define   angle(n)      atan2((n.imag()),(n.real()))
#define   vec(a,b)       ((b)-(a))
#define   length(a)      hypot( (a.imag()),(a.real()) )
#define   normalize(a)      (a)/(length(a))
#define    dp(a,b)          (((conj(a))*(b)).real())
#define    cp(a,b)          (((conj(a))*(b)).imag())
#define    lengthsqrt(a)       dp(a,a)
#define    rotate0( a,ang)    ((a)*exp( point(0,ang) ))
#define    rotateA(about,p,ang)   (rotate0(vec(about,p),ang)+about)
#define    lcm(a,b)                ((a*b)/(__gcd(a,b)))
#define    reflection0(m,v)         (conj((v)/(m))*(m))
#define     reflectionA(m,v,p0)     (conj( (vec(p0,v))/(vec(p0,m)) ) * (vec(p0,m)) ) + p0
#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < eps )
#define     point                    complex<double>
typedef  long long     ll ;
typedef  unsigned long long ull;
const double eps= (1e-9);
using namespace std;
int dcmp(long double a,long double b){   return fabsl(a-b)<=eps ? 0: (a>b)? 1:-1  ;}
int getBit(int num, int idx) {return ((num >> idx) & 1) == 1;}
int setBit1(int num, int idx) {return num | (1<<idx);}
ll setBit0(ll num, int idx) {return num & ~(1ll<<idx);}
ll flipBit(ll num, int idx) {return num ^ (1ll<<idx);}
void M(){ ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);}
int countNumBit1(int mask) {int ret=0; while (mask) 	{mask &= (mask-1);++ret;	}return ret;}
const int H=2000009;
vector< vector<int> > v(H),v1(H);
int arr[H],mx,vis[H],No;

void dfs(int no,int last)
{
    vis[no]=1;
    for(int i=0;i<sz(v[no]);i++)
    {
        int nw=v[no][i];

        if(vis[nw])
            continue;

        if(arr[nw]!=arr[last])
        {
            v1[last].pb(nw);
            v1[nw].pb(last);
          //  cout<<nw<<" "<<last<<endl;
            dfs(nw,nw);
        }
        else
            dfs(nw,last);



    }
}

void dfs1(int no,int len)
{
    vis[no]=1;
    int fl=0;
    for(int i=0;i<sz(v1[no]);i++)
    {
        int nw=v1[no][i];
        if(vis[nw])
            continue;
        fl=1;
        dfs1(nw,len+1);
    }

    if(fl==0)
    {
        if(len>=mx)
        {
            mx=len;
            No=no;
        }
    }
}













int main()
{
    M();
    int n;
    cin>>n;
    bool z=0,o=0;
    for(int i=1;i<=n;i++)
    {
        cin>>arr[i];
        if(arr[i]==0)
            z=1;
        else
            o=1;
    }
    int f,t;
    for(int i=0;i<n-1;i++)
    {
        cin>>f>>t;
        v[f].pb(t);
        v[t].pb(f);
    }
    if(!z||!o)
    {
        cout<<"0\n";
        return 0;
    }

   dfs(1,1);

   clr(vis,0);
   mx=0;
   dfs1(1,0);
   int No1=No;

   clr(vis,0);
   mx=0;
   dfs1(No1,0);
   int D=mx;

   cout<< ceil(D/2.0)<<endl;
}


