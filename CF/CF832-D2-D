#include <bits/stdc++.h>
#include<iostream>
#include<iomanip>
#include<cstring>
#include<map>
#define sz(v)   ((int)(v).size())
#define  all(v)    ((v).begin()),((v).end())
#define  allr(v)    ((v).rbegin()),((v).rend())
#define   pb         push_back
#define   mp         make_pair
#define   mt         make_tuple
#define    clr(v,d)      memset( v, d ,sizeof(v))
#define   angle(n)      atan2((n.imag()),(n.real()))
#define   vec(a,b)       ((b)-(a))
#define   length(a)      hypot( (a.imag()),(a.real()) )
#define   normalize(a)      (a)/(length(a))
#define    dp(a,b)          (((conj(a))*(b)).real())
#define    cp(a,b)          (((conj(a))*(b)).imag())
#define    lengthsqrt(a)       dp(a,a)
#define    rotate0( a,ang)    ((a)*exp( point(0,ang) ))
#define    rotateA(about,p,ang)   (rotate0(vec(about,p),ang)+about)
#define    lcm(a,b)                ((a*b)/(__gcd(a,b)))
#define    reflection0(m,v)         (conj((v)/(m))*(m))
#define     reflectionA(m,v,p0)     (conj( (vec(p0,v))/(vec(p0,m)) ) * (vec(p0,m)) ) + p0
#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < eps )
#define     point                    complex<double>
typedef  long long     ll ;
typedef  unsigned long long ull;
const double eps= (1e-5);
using namespace std;
int dcmp(long double a,long double b){   return fabsl(a-b)<=eps ? 0: (a>b)? 1:-1  ;}
ll getBit(ll num, int idx) {return ((num >> idx) & 1ll) == 1;}
int setBit1(int num, int idx) {return num | (1<<idx);}
ll setBit0(ll num, int idx) {return num & ~(1ll<<idx);}
ll flipBit(ll num, int idx) {return num ^ (1ll<<idx);}
void M(){ ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);}
int countNumBit1(int mask) {int ret=0; while (mask) 	{mask &= (mask-1);++ret;	}return ret;}
const int H=100009;
int vis[H],lv[H],par[H],p[H][20];
vector<vector<int> > v(H);
void dfs(int n,int l)
{
    lv[n]=l;
    vis[n]=1;
    for(int i=0;i<sz(v[n]);i++)
    {
        int nw=v[n][i];
        if(vis[nw])
            continue;
        par[nw]=n;
        dfs(nw,l+1);
    }
}









void I()
{
    clr(p,-1);
    clr(par,-1);
}

void LCA(int n)
{
    dfs(0,1);
    for(int i=0;i<n;i++)
        p[i][0]=par[i];

    for(int j=1;(1<<j)<n;j++)
    {
        for(int i=0;i<n;i++)
        {
            if(p[i][j-1]!=-1)
                p[i][j]=p[p[i][j-1]][j-1];
        }
    }
}

int query(int a,int b)
{
    if(lv[a]>lv[b])
        swap(a,b);

    int mx=(int)log2(lv[b]);

    for(int i=mx;i>=0;i--)
    {
        if(lv[b]-(1<<i)>=lv[a])
            b=p[b][i];
    }
   if(a==b)
    return a;
    for(int i=mx;i>=0;i--)
    {
        if(p[b][i]!=-1&&p[b][i]!=p[a][i])
        {
            b=p[b][i];
            a=p[a][i];
        }
    }
    return par[a];
}

int getdist(int a,int b)
{
    int lca=query(a,b);

    return lv[a]+lv[b]-2*lv[lca];
}
int getkth(int s,int k)
{
    int mx=(int)log2(lv[s]);

    for(int i=mx;i>=0;i--)
    {
        if(lv[s]-(1<<i)>=k)
            s=p[s][i];
    }
    return s;
}
int solve(int s,int f,int t)
{
    int lca1,lca2,lca3;
    lca1= query(s,f);
    lca2= query(f,t);
    lca3= query(s,t);

    if(lv[lca2]>lv[lca1]&&lv[lca2]<=lv[f])
        return lv[f]-lv[lca2];
    if(lca2==lca1)
        return lv[f]-lv[lca2]+(lv[lca3]-lv[lca1]);
    if(lv[lca2]<lv[lca1])
        return lv[f]-lv[lca1];
    return 0;
}






int main()
{
    int n,q,f,t;
    cin>>n>>q;

    for(int i=1;i<n;i++)
    {
        f=i;
        cin>>t;
         t--;
        v[f].pb(t);
        v[t].pb(f);

    }
    I();
    LCA(n);
    int a,b,c,mx=0;
    while(q--)
    {
        cin>>a>>b>>c;
        a--; b--; c--;
        mx=0;
        mx=max(mx,solve(a,b,c));
        mx=max(mx,solve(a,c,b));
        mx=max(mx,solve(b,c,a));
        mx=max(mx,solve(b,a,c));
        mx=max(mx,solve(c,b,a));
        mx=max(mx,solve(c,a,b));

        cout<<mx+1<<endl;
    }
}










