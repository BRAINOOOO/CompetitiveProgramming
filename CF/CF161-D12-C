#include <bits/stdc++.h>
#include<iostream>
#include<iomanip>
#include<cstring>
#include<map>
#define sz(v)   ((int)(v).size())
#define  all(v)    ((v).begin()),((v).end())
#define  allr(v)    ((v).rbegin()),((v).rend())
#define   pb         push_back
#define   mp         make_pair
#define   mt         make_tuple
#define    clr(v,d)      memset( v, d ,sizeof(v))
#define   angle(n)      atan2((n.imag()),(n.real()))
#define   vec(a,b)       ((b)-(a))
#define   length(a)      hypot( (a.imag()),(a.real()) )
#define   normalize(a)      (a)/(length(a))
#define    dp(a,b)          (((conj(a))*(b)).real())
#define    cp(a,b)          (((conj(a))*(b)).imag())
#define    lengthsqrt(a)       dp(a,a)
#define    rotate0( a,ang)    ((a)*exp( point(0,ang) ))
#define    rotateA(about,p,ang)   (rotate0(vec(about,p),ang)+about)
#define    lcm(a,b)                ((a*b)/(__gcd(a,b)))
#define    reflection0(m,v)         (conj((v)/(m))*(m))
#define     reflectionA(m,v,p0)     (conj( (vec(p0,v))/(vec(p0,m)) ) * (vec(p0,m)) ) + p0
#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < eps )
//#define     point                    complex<double>
typedef  long long     ll ;
typedef  unsigned long long ull;
const double eps= (1e-5);
using namespace std;
int dcmp(long double a,long double b){   return fabsl(a-b)<=eps ? 0: (a>b)? 1:-1  ;}
int getBit(int num, int idx) {return ((num >> idx) & 1) == 1;}
int setBit1(int num, int idx) {return num | (1<<idx);}
ll setBit0(ll num, int idx) {return num & ~(1ll<<idx);}
ll flipBit(ll num, int idx) {return num ^ (1ll<<idx);}
void M(){ ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);}
int countNumBit1(int mask) {int ret=0; while (mask) 	{mask &= (mask-1);++ret;	}return ret;}

ll go(int L1,int R1,int L2,int R2,int k)
{

    if(R1<L1||R2<L2)
        return 0;
    int v= (1<<k);

    if(L1>v)
    {
        L1-=v;
        R1-=v;
    }

    if(L2>v)
    {
        L2-=v;
        R2-=v;
    }

    if(L2>=L1&&R2<=R1)
        return R2-L2+1;

    if(L1>=L2&&R1<=R2)
        return R1-L1+1;


    ll mx=min(R1,R2)-max(L1,L2)+1;

    mx=max(mx,go(L1,min(R1,v-1),L2,min(R2,v-1),k-1));
    mx=max(mx,go(1,R1-v,L2,min(R2,v-1),k-1));
    mx=max(mx,go(L1,min(R1,v-1),0,R2-v,k-1));

    return mx;
}

int main()
{
    ll L1,L2,R1,R2;

    cin>>L1>>R1>>L2>>R2;

   cout<<go(L1,R1,L2,R2,30)<<endl;

}



