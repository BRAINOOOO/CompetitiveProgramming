/*
remember that the discarded number is always even, this way we make sure that at most one number is discarded for every
prime and that every discarded number can be paired with every other discarded number.

So in the end we match all multipliers of a prime not yet matched and if we must discard a number we know that number will not 
be a waste.

Among the discarded numbers all can be matched, this leaves at most one unmatched discarded number at the end (in this case, 
every other discarded number has been matched).

This strategy is the best because if we must discard a number when looking among the multiples of a certain prime it 
makes sure that it can be matched in the end and won't be a waste, if it must be a waste it will be the only waste.
*/
#include <bits/stdc++.h>
#include<iostream>
#include<iomanip>
#include<cstring>
#include<map>
#define sz(v)   ((int)(v).size())
#define  all(v)    ((v).begin()),((v).end())
#define  allr(v)    ((v).rbegin()),((v).rend())
#define   pb         push_back
#define   mp         make_pair
#define   mt         make_tuple
#define    clr(v,d)      memset( v, d ,sizeof(v))
#define   angle(n)      atan2((n.imag()),(n.real()))
#define   vec(a,b)       ((b)-(a))
#define   length(a)      hypot( (a.imag()),(a.real()) )
#define   normalize(a)      (a)/(length(a))
#define    dp(a,b)          (((conj(a))*(b)).real())
#define    cp(a,b)          (((conj(a))*(b)).imag())
#define    lengthsqrt(a)       dp(a,a)
#define    rotate0( a,ang)    ((a)*exp( point(0,ang) ))
#define    rotateA(about,p,ang)   (rotate0(vec(about,p),ang)+about)
#define    lcm(a,b)                ((a*b)/(__gcd(a,b)))
#define    reflection0(m,v)         (conj((v)/(m))*(m))
#define     reflectionA(m,v,p0)     (conj( (vec(p0,v))/(vec(p0,m)) ) * (vec(p0,m)) ) + p0
#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < eps )
//#define     point                    complex<double>
typedef  long long     ll ;
typedef  unsigned long long ull;
const double eps= (1e-5);
using namespace std;
int dcmp(long double a,long double b){   return fabsl(a-b)<=eps ? 0: (a>b)? 1:-1  ;}
int getBit(int num, int idx) {return ((num >> idx) & 1) == 1;}
int setBit1(int num, int idx) {return num | (1<<idx);}
ll setBit0(ll num, int idx) {return num & ~(1ll<<idx);}
ll flipBit(ll num, int idx) {return num ^ (1ll<<idx);}
void M(){ ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);}
int countNumBit1(int mask) {int ret=0; while (mask) 	{mask &= (mask-1);++ret;	}return ret;}
vector< pair<int,int> > ans;
int isprime[100009],del[100009];
vector< int > temp;
void primes(int n)
{
    for(int i=1;i<=n;i++)
        isprime[i]=1;

    for(int i=2;i*i<=n;i++)
    {
        if(isprime[i]==0)
            continue;
        for(int j=i*2;j<=n;j+=i)
            isprime[j]=0;
    }
}

int main()
{

    int n;
    cin>>n;
    int mx=n/2;
    primes(n);
    for(int i=mx;i>=2;i--)
    {
        temp.clear();
        if(isprime[i])
        {

            for(int j=i;j<=n;j+=i)
            {
                if(del[j])
                    continue;
                temp.pb(j);


            }

            if(sz(temp)%2==0)
            {
                for(int j=0;j<sz(temp);j+=2)
                {
                    ans.pb(mp(temp[j],temp[j+1]));
                    del[temp[j]]=1;
                    del[temp[j+1]]=1;
                }
            }
            else
            {
                temp.erase(find(all(temp),i*2));
                for(int j=0;j<sz(temp);j+=2)
                {
                    ans.pb(mp(temp[j],temp[j+1]));
                    del[temp[j]]=1;
                    del[temp[j+1]]=1;
                }
            }
        }



    }

    cout<<sz(ans)<<endl;

    for(int i=0;i<sz(ans);i++)
    {
        cout<<ans[i].first<<" "<<ans[i].second<<endl;
    }
}


