#include <bits/stdc++.h>
#include<iostream>
#include<iomanip>
#include<cstring>
#include<map>
#define sz(v)   ((int)(v).size())
#define  all(v)    ((v).begin()),((v).end())
#define  allr(v)    ((v).rbegin()),((v).rend())
#define   pb         push_back
#define   mp         make_pair
#define   mt         make_tuple
#define    clr(v,d)      memset( v, d ,sizeof(v))
#define   angle(n)      atan2((n.imag()),(n.real()))
#define   vec(a,b)       ((b)-(a))
#define   length(a)      hypot( (a.imag()),(a.real()) )
#define   normalize(a)      (a)/(length(a))
#define    dp(a,b)          (((conj(a))*(b)).real())
#define    cp(a,b)          (((conj(a))*(b)).imag())
#define    lengthsqrt(a)       dp(a,a)
#define    rotate0( a,ang)    ((a)*exp( point(0,ang) ))
#define    rotateA(about,p,ang)   (rotate0(vec(about,p),ang)+about)
#define    lcm(a,b)                ((a*b)/(__gcd(a,b)))
#define    reflection0(m,v)         (conj((v)/(m))*(m))
#define     reflectionA(m,v,p0)     (conj( (vec(p0,v))/(vec(p0,m)) ) * (vec(p0,m)) ) + p0
#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < eps )
#define     point                    complex<double>
typedef  long long     ll ;
typedef  unsigned long long ull;
const double eps= (1e-9);
using namespace std;
int dcmp(long double a,long double b){   return fabsl(a-b)<=eps ? 0: (a>b)? 1:-1  ;}
int getBit(int num, int idx) {return ((num >> idx) & 1) == 1;}
int setBit1(int num, int idx) {return num | (1<<idx);}
ll setBit0(ll num, int idx) {return num & ~(1ll<<idx);}
ll flipBit(ll num, int idx) {return num ^ (1ll<<idx);}
void M(){ ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);}
int countNumBit1(int mask) {int ret=0; while (mask) 	{mask &= (mask-1);++ret;	}return ret;}
const int H=2000009;
ll MOD=1e9+7;
ll power[H],divi[1000009],dp[1000009];
void getdiv(int n)
{
    //if(divi[n]!=0)
      //  return;
    int i;
    divi[n]++;
    for(i=2;i*i<n;i++)
    {
        if(n%i==0)
        {
            divi[i]++;
            divi[n/i]++;
        }
    }

    if(i*i==n)
        divi[i]++;
}
int main()
{
    M();
    int n;
    cin>>n;
    int no;
    for(int i=0;i<n;i++)
    {
        cin>>no;
        getdiv(no);
    }
    power[0]=1;
    for(int i=1;i<H;i++)
        power[i]=(power[i-1]*2)%MOD;
    ll ans=0;
    for(int i=1000000;i>=2;i--)
    {
        if(divi[i]==0)
            continue;
        ll tans= (divi[i]*power[divi[i]-1])%MOD;

        for(int j=i+i;j<=1000000;j+=i)
        {
            tans-= dp[j];
            tans+=MOD;
            tans%=MOD;
        }

        dp[i]=tans;
        ans= (ans+(i*tans)%MOD)%MOD;
    }
  //  cout<<divi[6]<<endl;
    cout<<ans<<endl;
}
