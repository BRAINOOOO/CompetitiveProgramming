#include <bits/stdc++.h>
#include<iostream>
#include<iomanip>
#include<cstring>
#include<map>
#define sz(v)   ((int)(v).size())
#define  all(v)    ((v).begin()),((v).end())
#define  allr(v)    ((v).rbegin()),((v).rend())
#define   pb         push_back
#define   mp         make_pair
#define   mt         make_tuple
#define    clr(v,d)      memset( v, d ,sizeof(v))
#define   angle(n)      atan2((n.imag()),(n.real()))
#define   vec(a,b)       ((b)-(a))
#define   length(a)      hypot( (a.imag()),(a.real()) )
#define   normalize(a)      (a)/(length(a))
#define    dp(a,b)          (((conj(a))*(b)).real())
#define    cp(a,b)          (((conj(a))*(b)).imag())
#define    lengthsqrt(a)       dp(a,a)
#define    rotate0( a,ang)    ((a)*exp( point(0,ang) ))
#define    rotateA(about,p,ang)   (rotate0(vec(about,p),ang)+about)
#define    lcm(a,b)                ((a*b)/(__gcd(a,b)))
#define    reflection0(m,v)         (conj((v)/(m))*(m))
#define     reflectionA(m,v,p0)     (conj( (vec(p0,v))/(vec(p0,m)) ) * (vec(p0,m)) ) + p0
#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < eps )
#define     point                    complex<double>
typedef  long long     ll ;
typedef  unsigned long long ull;
const double eps= (1e-5);
using namespace std;
int dcmp(long double a,long double b){   return fabsl(a-b)<=eps ? 0: (a>b)? 1:-1  ;}
ll getBit(ll num, int idx) {return ((num >> idx) & 1ll) == 1;}
int setBit1(int num, int idx) {return num | (1<<idx);}
ll setBit0(ll num, int idx) {return num & ~(1ll<<idx);}
ll flipBit(ll num, int idx) {return num ^ (1ll<<idx);}
void M(){ ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);}
int countNumBit1(int mask) {int ret=0; while (mask) 	{mask &= (mask-1);++ret;	}return ret;}
vector<pair<ll,char>> seq,pat,v1,v2;
ll prefix[200009],s1=0,s2=0;
ll KMP()
{
    ll cnt=0;
    ll n=sz(seq);
    ll m=sz(pat);

    for(ll i=1,k=0;i<m;i++)
    {

        while(k>0&&!((pat[k].second==pat[i].second&&((k==0&&pat[k].first<=pat[i].first)||(pat[k].first==pat[i].first)))))
            k=prefix[k-1];

        if(pat[k].second==pat[i].second&&((k==0&&pat[k].first<=pat[i].first)||(pat[k].first==pat[i].first)))
            prefix[i]=++k;
        else
            prefix[i]=k;

    }
//cout<<prefix[4]<<endl;
    for(ll i=0,k=0;i<n;i++)
    {

        while(k>0&&!(((pat[k].second==seq[i].second&&pat[k].first==seq[i].first)  ||  (pat[k].second==seq[i].second&&pat[k].first<seq[i].first&&(k==m-1||k==0)))))
            k=prefix[k-1];
        int fl=0;
        if(pat[k].second==seq[i].second&&pat[k].first==seq[i].first)
          k++;//,cout<<" L "<<i<<endl;
        else if(pat[k].second==seq[i].second&&pat[k].first<seq[i].first)
        {
            if(k==m-1)
                fl=1;
            if(k==m-1||k==0)
                k++;//,cout<<k<<" M "<<i<<endl;

        }

        if(k==m)
        {
           
            cnt++;
         //   cout<<fl<<" "<<k<<endl;
            if(!fl||prefix[k-1]<=1)
            k=prefix[k-1];
            else
            {
                k=0;
                i--;

            }

        }

    }

    return cnt;
}









int main()
{
    ll n,m;
    cin>>n>>m;
    char ch;
    ll no;
    char prech='A';
    for(ll i=0;i<n;i++)
    {
        scanf("%I64d-%c",&no,&ch);
         s1+=no;
        v1.pb(mp(no,ch));

    }

    for(ll i=0;i<m;i++)
    {
        scanf("%I64d-%c",&no,&ch);
        s2+=no;
        v2.pb(mp(no,ch));

    }

    if(s2>s1)
    {
        cout<<"0\n";
        return 0;
    }
    ll sum=0;
    for(int i=0;i<sz(v1);i++)
    {
        if(i+1<sz(v1)&&v1[i].second==v1[i+1].second)
        {
            sum+=v1[i].first;
        }
        else
        {
             sum+=v1[i].first;
             seq.pb(mp(sum,v1[i].second));
             sum=0;
        }
    }
    sum=0;
    for(int i=0;i<sz(v2);i++)
    {
        if(i+1<sz(v2)&&v2[i].second==v2[i+1].second)
        {
            sum+=v2[i].first;
        }
        else
        {
             sum+=v2[i].first;
             pat.pb(mp(sum,v2[i].second));
             sum=0;
        }
    }
    ll ans=0;
    if(sz(pat)>1)
   cout<< KMP()<<endl;
   else
   {
       ch=pat[0].second;
       no=pat[0].first;
       for(int i=0;i<sz(seq);i++)
       {
           if(seq[i].second==ch)
           {
               ans+=max(0ll,(seq[i].first-no+1));
           }
       }
       cout<<ans<<endl;
   }


}



