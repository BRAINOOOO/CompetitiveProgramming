#include <bits/stdc++.h>
#include<iostream>
#include<iomanip>
#include<cstring>
#include<map>
#define sz(v)   ((int)(v).size())
#define  all(v)    ((v).begin()),((v).end())
#define  allr(v)    ((v).rbegin()),((v).rend())
#define   pb         push_back
#define   mp         make_pair
#define   mt         make_tuple
#define    clr(v,d)      memset( v, d ,sizeof(v))
#define   angle(n)      atan2((n.imag()),(n.real()))
#define   vec(a,b)       ((b)-(a))
#define   length(a)      hypot( (a.imag()),(a.real()) )
#define   normalize(a)      (a)/(length(a))
#define    dp(a,b)          (((conj(a))*(b)).real())
#define    cp(a,b)          (((conj(a))*(b)).imag())
#define    lengthsqrt(a)       dp(a,a)
#define    rotate0( a,ang)    ((a)*exp( point(0,ang) ))
#define    rotateA(about,p,ang)   (rotate0(vec(about,p),ang)+about)
#define    lcm(a,b)                ((a*b)/(__gcd(a,b)))
#define    reflection0(m,v)         (conj((v)/(m))*(m))
#define     reflectionA(m,v,p0)     (conj( (vec(p0,v))/(vec(p0,m)) ) * (vec(p0,m)) ) + p0
#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < eps )
#define     point                    complex<double>
typedef  long long     ll ;
typedef  unsigned long long ull;
const double eps= (1e-9);
using namespace std;
int dcmp(long double a,long double b){   return fabsl(a-b)<=eps ? 0: (a>b)? 1:-1  ;}
int getBit(int num, int idx) {return ((num >> idx) & 1) == 1;}
int setBit1(int num, int idx) {return num | (1<<idx);}
ll setBit0(ll num, int idx) {return num & ~(1ll<<idx);}
ll flipBit(ll num, int idx) {return num ^ (1ll<<idx);}
void M(){ ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);}
int countNumBit1(int mask) {int ret=0; while (mask) 	{mask &= (mask-1);++ret;	}return ret;}
const int H=200009;
vector< vector< pair<int,int> > > v(H);
int vis[H],arr[H],mxneed[H];
vector< pair<int,int> > ans;
map< pair<int,int> ,int> mb;
void dfs(int no,int len,int pr)
{
    vis[no]=1;
    arr[no]= max(0,((len/2+(len%2!=0)))-pr);
    mxneed[no]=arr[no];
    for(int i=0;i<sz(v[no]);i++)
    {
        int nw=v[no][i].first;
        if(vis[nw])
            continue;
        int D= v[no][i].second;

        dfs(nw,len+1,pr+!D);
        mxneed[no]=max(mxneed[no],mxneed[nw]);
    }
}

void dfs1(int no,int sub)
{
    vis[no]=1;

    for(int i=0;i<sz(v[no]);i++)
    {
        int nw=v[no][i].first;
        int D= v[no][i].second;
        if(vis[nw])
            continue;
        if(mxneed[nw]-sub>0&&D)
        {
            ans.pb(mp(no,nw));
            dfs1(nw,sub+1);
        }
        else
            dfs1(nw,sub);


    }
}
















int main()
{

    int n;
    cin>>n;
    int f,t;
    string s1,s2;
    for(int i=0;i<n-1;i++)
    {
        int fl;
        cin>>f>>t>>s1;
        mb[mp(f,t)]=i+1;
        mb[mp(t,f)]=i+1;
        if(s1=="almost")
        {
            cin>>s2;
            fl=1;
        }
        else
            fl=0;
        v[f].pb(mp(t,fl));
        v[t].pb(mp(f,fl));
    }

    dfs(1,0,0);
    clr(vis,0);
    dfs1(1,0);

//cout<<mxneed[5]<<endl;

  cout<<sz(ans)<<endl;
  for(int i=0;i<sz(ans);i++)
    cout<<mb[mp(ans[i].first,ans[i].second)]<<" ";
}






