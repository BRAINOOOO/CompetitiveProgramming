#include <bits/stdc++.h>
#include<iostream>
#include<iomanip>
#include<cstring>
#include<map>
#define sz(v)   ((int)(v).size())
#define  all(v)    ((v).begin()),((v).end())
#define  allr(v)    ((v).rbegin()),((v).rend())
#define   pb         push_back
#define   mp         make_pair
#define   mt         make_tuple
#define    clr(v,d)      memset( v, d ,sizeof(v))
#define   angle(n)      atan2((n.imag()),(n.real()))
#define   vec(a,b)       ((b)-(a))
#define   length(a)      hypot( (a.imag()),(a.real()) )
#define   normalize(a)      (a)/(length(a))
#define    dp(a,b)          (((conj(a))*(b)).real())
#define    cp(a,b)          (((conj(a))*(b)).imag())
#define    lengthsqrt(a)       dp(a,a)
#define    rotate0( a,ang)    ((a)*exp( point(0,ang) ))
#define    rotateA(about,p,ang)   (rotate0(vec(about,p),ang)+about)
#define    lcm(a,b)                ((a*b)/(__gcd(a,b)))
#define    reflection0(m,v)         (conj((v)/(m))*(m))
#define     reflectionA(m,v,p0)     (conj( (vec(p0,v))/(vec(p0,m)) ) * (vec(p0,m)) ) + p0
#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < eps )
#define     point                    complex<double>
typedef  long long     ll ;
typedef  unsigned long long ull;
const double eps= (1e-5);
using namespace std;
int dcmp(long double a,long double b){   return fabsl(a-b)<=eps ? 0: (a>b)? 1:-1  ;}
ll getBit(ll num, int idx) {return ((num >> idx) & 1ll) == 1;}
int setBit1(int num, int idx) {return num | (1<<idx);}
ll setBit0(ll num, int idx) {return num & ~(1ll<<idx);}
ll flipBit(ll num, int idx) {return num ^ (1ll<<idx);}
void M(){ ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);}
int countNumBit1(int mask) {int ret=0; while (mask) 	{mask &= (mask-1);++ret;	}return ret;}
ll vis[59],a[59][59],out[59],n,id=1,v[59][59],dp[2][59];

ll MOD=1000000007;
void floyed()
{

    for(int k=1;k<=n;k++)
     for(int i=1;i<=n;i++)
        for(int j=1;j<=n;j++)
         if(a[i][k]&&a[k][j])
          a[i][j]=1;
}



class MonsterFarm
{
public :

     int numMonsters(vector <string> trans)
     {

        n=sz(trans);


         for(int i=0;i<sz(trans);i++)
         {
             stringstream ss(trans[i]);
             int no;
             while(ss>>no)
             {
                 v[i+1][no]++;
                 a[i+1][no]=1;
                 out[i+1]++;
             }
         }



         floyed();
         int no=0;


         for(int i=1;i<=n&&!no;i++)
         {
             if(a[1][i]&&a[i][i]&&out[i]>1)
             {
                    return -1;

             }
         }
          dp[0][1]=1;
          for(int lv=1;lv<=n;lv++)
          {

              for(int i=1;i<=n;i++)
              {
                  for(int j=1;j<=n;j++)
                  {

                      dp[1][j]= dp[1][j]+ (dp[0][i]*v[i][j])%MOD;


                  }
              }

              for(int i=1;i<=n;i++)
                dp[0][i]=dp[1][i];

              clr(dp[1],0);
          }

          ll ans=0;
          for(int i=1;i<=n;i++)
          {
              ans+= dp[0][i];
          }

        return (ans%MOD);
     }
};
