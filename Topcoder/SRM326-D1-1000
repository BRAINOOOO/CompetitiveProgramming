#include <bits/stdc++.h>
#include<iostream>
#include<iomanip>
#include<cstring>
#include<map>
#define sz(v)   ((int)(v).size())
#define  all(v)    ((v).begin()),((v).end())
#define  allr(v)    ((v).rbegin()),((v).rend())
#define   pb         push_back
#define   mp         make_pair
#define   mt         make_tuple
#define    clr(v,d)      memset( v, d ,sizeof(v))
#define   angle(n)      atan2((n.imag()),(n.real()))
#define   vec(a,b)       ((b)-(a))
#define   length(a)      hypot( (a.imag()),(a.real()) )
#define   normalize(a)      (a)/(length(a))
#define    dp(a,b)          (((conj(a))*(b)).real())
#define    cp(a,b)          (((conj(a))*(b)).imag())
#define    lengthsqrt(a)       dp(a,a)
#define    rotate0( a,ang)    ((a)*exp( point(0,ang) ))
#define    rotateA(about,p,ang)   (rotate0(vec(about,p),ang)+about)
#define    lcm(a,b)                ((a*b)/(__gcd(a,b)))
#define    reflection0(m,v)         (conj((v)/(m))*(m))
#define     reflectionA(m,v,p0)     (conj( (vec(p0,v))/(vec(p0,m)) ) * (vec(p0,m)) ) + p0
#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < eps )
#define     point                    complex<double>
typedef  long long     ll ;
typedef  unsigned long long ull;
const double eps= (1e-5);
using namespace std;
int dcmp(long double a,long double b){   return fabsl(a-b)<=eps ? 0: (a>b)? 1:-1  ;}
ll getBit(ll num, int idx) {return ((num >> idx) & 1ll) == 1;}
int setBit1(int num, int idx) {return num | (1<<idx);}
ll setBit0(ll num, int idx) {return num & ~(1ll<<idx);}
ll flipBit(ll num, int idx) {return num ^ (1ll<<idx);}
void M(){ ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);}
int countNumBit1(int mask) {int ret=0; while (mask) 	{mask &= (mask-1);++ret;	}return ret;}


unsigned mask[100001];
class BerryPacker
 {
	public:
	double bestPacking(vector <int> first, vector <int> period, int berries)
	{
		int n = first.size();
		memset(mask, 0, sizeof mask); // mask for the inspectors that see box i
		vector<int> sees(n); // num of boxes inspector i sees
		vector<int> num(1<<n); // number of boxes that the given mask of inspectors sees
		double sol = 0.0;

		for (int boxes=1; boxes<=berries; ++boxes)
        {
			++num[0]; // no inspectors initially see this box
			for (int i=0; i<n; ++i)
				while (first[i] < boxes)
				{
					--num[mask[first[i]]];
					mask[first[i]] |= 1<<i;
					++num[mask[first[i]]];
					++sees[i];
					first[i] += period[i];
				}

			vector<double> val(1<<n);
			for (int m=0; m<(1<<n); ++m)
				for (int i=0; i<n; ++i)
					if (m & (1<<i))
						if (sees[i] > 0)
							val[m] += double(boxes)/sees[i];

			vector< pair<double, int> > v(1<<n);
			for (int m=0; m<(1<<n); ++m)
            {
				v[m].first = val[m];
				v[m].second = num[m];
			}
			sort(v.begin(), v.end());
			reverse(v.begin(), v.end());
			double cur = 0.0;
			int left = berries - boxes;
			for (int m=0; m<(1<<n); ++m)
			{
				int add = min(left, v[m].second*8);
				left -= add;
				cur += v[m].first*(v[m].second+add);
			}
			sol = max(sol, cur);
		}
		return sol/n;
	}


};














