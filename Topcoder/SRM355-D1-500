#include <bits/stdc++.h>
#include<iostream>
#include<iomanip>
#include<cstring>
#include<map>
#define sz(v)   ((int)(v).size())
#define  all(v)    ((v).begin()),((v).end())
#define  allr(v)    ((v).rbegin()),((v).rend())
#define   pb         push_back
#define   mp         make_pair
#define   mt         make_tuple
#define    clr(v,d)      memset( v, d ,sizeof(v))
#define   angle(n)      atan2((n.imag()),(n.real()))
#define   vec(a,b)       ((b)-(a))
#define   length(a)      hypot( (a.imag()),(a.real()) )
#define   normalize(a)      (a)/(length(a))
#define    dp(a,b)          (((conj(a))*(b)).real())
#define    cp(a,b)          (((conj(a))*(b)).imag())
#define    lengthsqrt(a)       dp(a,a)
#define    rotate0( a,ang)    ((a)*exp( point(0,ang) ))
#define    rotateA(about,p,ang)   (rotate0(vec(about,p),ang)+about)
#define    lcm(a,b)                ((a*b)/(__gcd(a,b)))
#define    reflection0(m,v)         (conj((v)/(m))*(m))
#define     reflectionA(m,v,p0)     (conj( (vec(p0,v))/(vec(p0,m)) ) * (vec(p0,m)) ) + p0
#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < eps )
#define     point                    complex<double>
typedef  long long     ll ;
typedef  unsigned long long ull;
const double eps= (1e-9);
using namespace std;
int dcmp(long double a,long double b){   return fabsl(a-b)<=eps ? 0: (a>b)? 1:-1  ;}
int getBit(int num, int idx) {return ((num >> idx) & 1) == 1;}
int setBit1(int num, int idx) {return num | (1<<idx);}
ll setBit0(ll num, int idx) {return num & ~(1ll<<idx);}
ll flipBit(ll num, int idx) {return num ^ (1ll<<idx);}
void M(){ ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);}
int countNumBit1(int mask) {int ret=0; while (mask) 	{mask &= (mask-1);++ret;	}return ret;}
const int INF = 1000000000;
const ld EPS = 1e-10L;
const ld PI = 3.14159265358979L;

class Tetrahedron
{
// Global

// Functions
public:
  string exists(vector <string> d)
  {
    string res;
   // int n;
    int a[4][4];
    for (int i = 0; i < 4; ++i)
    {
      istringstream in(d[i]);
      for (int j = 0; j < 4; ++j)
        in >> a[i][j];
    }
    for (int i = 0; i < 4; ++i)
    {
      for (int j = 0; j < 4; ++j)
      {
        for (int k = 0; k < 4; ++k)
        {
          if (a[i][j] + a[j][k] < a[i][k])
           return "NO";
        }
      }
    }
    double x0 = 0;
    double y0 = 0;
    double x1 = a[0][1];
    double y1 = 0;
    double x2 = (a[0][2] * a[0][2] - a[1][2] * a[1][2] + x1 * x1) / (2 * x1);
    cout<<x2<<endl;
    double y2 = sqrt(a[0][2] * a[0][2] - x2 * x2);
    double x3 = (a[0][3] * a[0][3] - a[1][3] * a[1][3] + x1 * x1) / (2 * x1);
    double y3 = sqrt(a[0][3] * a[0][3] - x3 * x3);
    if (hypot(x2 - x3, y2 - y3) - EPS < a[2][3] && hypot(x2 - x3, y2 + y3) + EPS > a[2][3])
      return "YES";
    else
      return "NO";
    return res;
  }


};

int main()
{
    Tetrahedron e;
    cout<<e.exists(	{"0 0 2 2", "4 0 4 3", "2 4 0 1", "2 3 1 0"}	);
}
