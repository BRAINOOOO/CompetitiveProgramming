/*
see combinations and permuations 
*/


#include <bits/stdc++.h>
#include<iostream>
#include<iomanip>
#include<cstring>
#include<map>
#define sz(v)   ((int)(v).size())
#define  all(v)    ((v).begin()),((v).end())
#define  allr(v)    ((v).rbegin()),((v).rend())
#define   pb         push_back
#define   mp         make_pair
#define   mt         make_tuple
#define    clr(v,d)      memset( v, d ,sizeof(v))
#define   angle(n)      atan2((n.imag()),(n.real()))
#define   vec(a,b)       ((b)-(a))
#define   length(a)      hypot( (a.imag()),(a.real()) )
#define   normalize(a)      (a)/(length(a))
#define    dp(a,b)          (((conj(a))*(b)).real())
#define    cp(a,b)          (((conj(a))*(b)).imag())
#define    lengthsqrt(a)       dp(a,a)
#define    rotate0( a,ang)    ((a)*exp( point(0,ang) ))
#define    rotateA(about,p,ang)   (rotate0(vec(about,p),ang)+about)
#define    lcm(a,b)                ((a*b)/(__gcd(a,b)))
#define    reflection0(m,v)         (conj((v)/(m))*(m))
#define     reflectionA(m,v,p0)     (conj( (vec(p0,v))/(vec(p0,m)) ) * (vec(p0,m)) ) + p0
#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < eps )
#define     point                    complex<double>
typedef  long long     ll ;
typedef  unsigned long long ull;
const double eps= (1e-5);
using namespace std;
int dcmp(long double a,long double b){   return fabsl(a-b)<=eps ? 0: (a>b)? 1:-1  ;}
ll getBit(ll num, int idx) {return ((num >> idx) & 1ll) == 1;}
int setBit1(int num, int idx) {return num | (1<<idx);}
ll setBit0(ll num, int idx) {return num & ~(1ll<<idx);}
ll flipBit(ll num, int idx) {return num ^ (1ll<<idx);}
void M(){ ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);}
int countNumBit1(int mask) {int ret=0; while (mask) 	{mask &= (mask-1);++ret;	}return ret;}
typedef struct Node
{
    string name,sorted,uniqued;
    ll cap,blk;
    Node(string a,ll b,ll c,string d,string e)
    {
        name=a; cap=b; blk=c; sorted=d; uniqued=e;
    }
}N;
vector<N> v;

ll power(ll b,ll p)
{
    if(p==0)
        return 1;
    if(p&1)
        return b*power(b*b,p/2);
    else
        return power(b*b,p/2);
}
ll calc(int n,int len)
{
    ll s=1;
    for(int i=0;i<len;i++)
        s*=(n-i);
    return s;
}
ll calc2(int n,int p)
{
    ll s=1,s2=1;
    for(int i=n;i<=n-1+p;i++)
        s*=i;
    for(int i=1;i<=p;i++)
        s2*=i;

    return s/s2;
}
ll calc3(int n,int p)
{
    ll s=1,s2=1;
    for(int i=n-p+1;i<=n;i++)
        s*=i;
    for(int i=1;i<=p;i++)
        s2*=i;
    return s/s2;
}








class  Lottery
{
public:
    vector <string> sortByOdds(vector <string> rules)
    {


        string st,sorted,uniqued,s="";
        ll cap,blk,I;
        for(int i=0;i<sz(rules);i++)
        {


            for(int j=0;j<sz(rules[i]);j++)
            {
                if(rules[i][j]==':')
                {
                    st=s;
                    s="";
                    I=j+1;
                    break;
                }

                s+=rules[i][j];
            }

            string ss=rules[i].assign(rules[i].begin()+I,rules[i].end());

            stringstream line(ss);
            line>>cap>>blk>>sorted>>uniqued;

            v.pb(N(st,cap,blk,sorted,uniqued));

        }


        vector< string > ans;
        vector< pair<ll,string> > v1;
        ll res;
        for(int i=0;i<sz(v);i++)
        {

            string nam=v[i].name;
            int cap=v[i].cap;
            int blk=v[i].blk;
            string so=v[i].sorted;
            string uni=v[i].uniqued;


            if(so=="F"&&uni=="F")
                res=power(cap,blk);
            if(so=="F"&&uni=="T")
                res=calc(cap,blk);
            if(so=="T"&&uni=="F")
                res=calc2(cap,blk);
            if(so=="T"&&uni=="T")
            {
                res=calc3(cap,blk);
            }
            //cout<<res<<endl;
           v1.pb(mp(res,nam));

        }
       sort(all(v1));

         for(int i=0;i<sz(v1);i++)
           ans.pb(v1[i].second);

           return ans;


    }
};





int main()
{
    Lottery e;
    vector< string > vvv;
    vvv.pb("PICK ANY TWO: 10 2 F F");
    vvv.pb("PICK TWO IN ORDER: 10 2 T F");
    vvv.pb("PICK TWO DIFFERENT: 10 2 F T");
    vvv.pb("PICK TWO LIMITED: 10 2 T T");

e.sortByOdds(vvv) ;
}


