#include <bits/stdc++.h>
#include<iostream>
#include<iomanip>
#include<cstring>
#include<map>
#define sz(v)   ((int)(v).size())
#define  all(v)    ((v).begin()),((v).end())
#define  allr(v)    ((v).rbegin()),((v).rend())
#define   pb         push_back
#define   mp         make_pair
#define   mt         make_tuple
#define    clr(v,d)      memset( v, d ,sizeof(v))
#define   angle(n)      atan2((n.imag()),(n.real()))
#define   vec(a,b)       ((b)-(a))
#define   length(a)      hypot( (a.imag()),(a.real()) )
#define   normalize(a)      (a)/(length(a))
#define    dp(a,b)          (((conj(a))*(b)).real())
#define    cp(a,b)          (((conj(a))*(b)).imag())
#define    lengthsqrt(a)       dp(a,a)
#define    rotate0( a,ang)    ((a)*exp( point(0,ang) ))
#define    rotateA(about,p,ang)   (rotate0(vec(about,p),ang)+about)
#define    lcm(a,b)                ((a*b)/(__gcd(a,b)))
#define    reflection0(m,v)         (conj((v)/(m))*(m))
#define     reflectionA(m,v,p0)     (conj( (vec(p0,v))/(vec(p0,m)) ) * (vec(p0,m)) ) + p0
#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < eps )
#define     point                    complex<double>
typedef  long long     ll ;
typedef  unsigned long long ull;
const double eps= (1e-5);
using namespace std;
int dcmp(long double a,long double b){   return fabsl(a-b)<=eps ? 0: (a>b)? 1:-1  ;}
ll getBit(ll num, int idx) {return ((num >> idx) & 1ll) == 1;}
int setBit1(int num, int idx) {return num | (1<<idx);}
ll setBit0(ll num, int idx) {return num & ~(1ll<<idx);}
ll flipBit(ll num, int idx) {return num ^ (1ll<<idx);}
void M(){ ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);}
int countNumBit1(int mask) {int ret=0; while (mask) 	{mask &= (mask-1);++ret;	}return ret;}
vector< pair< int,pair<int,int> > > v;
int par[1009],rnk[1009];
int getpar(int n)
{
    if(par[n]==n)
        return n;
    return par[n]=getpar(par[n]);
}
void I(int n)
{
    for(int i=0;i<n;i++)
        par[i]=i,rnk[i]=1;
}
bool lnk(int a,int b)
{
    a=getpar(a);
    b=getpar(b);

    if(a==b)
        return 0;
    if(rnk[a]>=rnk[b])
    {
        par[b]=a;
        rnk[a]+=rnk[b];
        rnk[b]=0;
    }
    else
    {
        par[a]=b;
        rnk[b]+=rnk[a];
        rnk[a]=0;
    }
    return 1;
}
class  TimeTravellingSalesman
{
public:

    ll determineCost(int n,vector<string> roads)
    {
        string s="";
       for(int i=0;i<sz(roads);i++)
          s+=roads[i];
        s+=" ";
        int cnt=0;
        int A,B,C;
        string st="";
        for(int i=0;i<sz(s);i++)
        {
            if(isdigit(s[i]))
            {
                st+=s[i];
            }

            if(s[i]==',')
            {
                cnt++;
                if(cnt==1)
                {
                    A=atoi(st.c_str());
                    st="";
                }
                else if(cnt==2)
                {
                    B=atoi(st.c_str());
                    st="";
                }
            }

            if(s[i]==' ')
            {
                C=atoi(st.c_str());
                st="";
                v.pb(mp(C,mp(A,B)));
                cnt=0;
            }
        }
        I(n);
        sort(all(v));
        ll ans=0;
        for(int i=0;i<sz(v);i++)
        {

            C=v[i].first;
            A=v[i].second.first;
            B=v[i].second.second;

            if(lnk(A,B))
            {
                ans+=C;
            }
            else
            {
                continue;
            }

        }

        for(int i=0;i<n;i++)
        {
            if(rnk[i]!=0)
                cnt++;
        }
        if(cnt>1)
            return -1;
        return ans;
    }
};
















